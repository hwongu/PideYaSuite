/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package edu.pe.ulima.frontend.pideya.desktop.internalframe;

import edu.pe.ulima.pideya.back.model.Categoria;
import edu.pe.ulima.pideya.back.model.Cliente;
import edu.pe.ulima.pideya.back.model.ClienteEmpresa;
import edu.pe.ulima.pideya.back.model.ClienteNatural;
import edu.pe.ulima.pideya.back.model.DetallePedido;
import edu.pe.ulima.pideya.back.model.Pedido;
import edu.pe.ulima.pideya.back.model.Producto;
import edu.pe.ulima.pideya.back.service.CategoriaService;
import edu.pe.ulima.pideya.back.service.ClienteEmpresaService;
import edu.pe.ulima.pideya.back.service.ClienteNaturalService;
import edu.pe.ulima.pideya.back.service.PedidoService;
import edu.pe.ulima.pideya.back.service.ProductoService;
import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.net.URL;
import java.text.DecimalFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListCellRenderer;
import javax.swing.ImageIcon;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;

/**
 *
 * @author hwong
 */
public class FrmPedido extends javax.swing.JInternalFrame {

    private ClienteEmpresaService clienteEmpresaService = new ClienteEmpresaService();
    private ClienteNaturalService clienteNaturalService = new ClienteNaturalService();
    private PedidoService pedidoService = new PedidoService();
    private ProductoService productoService = new ProductoService();
    private DefaultTableModel detalleModel;

    /**
     * Creates new form FrmPedido
     */
    public FrmPedido() {
        try {
            initComponents();
            URL url = getClass().getClassLoader().getResource("Logo.png");
            if (url != null) {
                this.lblTituloFormulario.setIcon(new ImageIcon(url));
            } else {
                System.err.println("Â¡Recurso no encontrado: miIcono.png!");
            }
            this.lblTituloFormulario.setText("Registrar Pedido de Producto");
            this.setTitle("Registrar Pedido de Producto");
            if (cboTipoCliente.getSelectedIndex() == 0) {
                llenarComboClienteNatural();
            } else {
                llenarComboClienteEmpresa();
            }
            llenarComboCategoria();
            inicializarTablaDetalle();
            inicializarTablaPedidosConDetalles();
        } catch (Exception ex) {
            Logger.getLogger(FrmCategoria.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void limpiar() {
        txtCodigo.setText("");
        cboTipoCliente.setSelectedIndex(1);
        cboTipoCliente.setSelectedIndex(0);
        cboCategoria.setSelectedIndex(1);
        cboCategoria.setSelectedIndex(0);
        llenarComboCategoria();
        inicializarTablaDetalle();
        inicializarTablaPedidosConDetalles();
        txtMontoTotal.setText("");
        txtCantidad.setText("");
        btnGuardar.setEnabled(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblTituloFormulario = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jtbPrincipal = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtFiltro = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        btnActualizarPedidos = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtbDetallePedido = new javax.swing.JTable();
        jPanel10 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtStock = new javax.swing.JTextField();
        cboTipoCliente = new javax.swing.JComboBox<>();
        cboCliente = new javax.swing.JComboBox<>();
        cboCategoria = new javax.swing.JComboBox<>();
        txtCodigo = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtPrecio = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtCantidad = new javax.swing.JFormattedTextField();
        btnAnadir = new javax.swing.JButton();
        btnQuitar = new javax.swing.JButton();
        cboProducto = new javax.swing.JComboBox<>();
        jPanel11 = new javax.swing.JPanel();
        txtMontoTotal = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        btnAnular = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(589, 60));

        lblTituloFormulario.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblTituloFormulario.setText("Mantenimiento");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTituloFormulario, javax.swing.GroupLayout.DEFAULT_SIZE, 1005, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTituloFormulario)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.BorderLayout());

        jtFiltro.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtFiltro);

        jPanel5.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel6.setPreferredSize(new java.awt.Dimension(776, 40));

        btnActualizarPedidos.setText("Refrescar Pedidos");
        btnActualizarPedidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarPedidosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnActualizarPedidos, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(872, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnActualizarPedidos, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.add(jPanel6, java.awt.BorderLayout.NORTH);

        jtbPrincipal.addTab("Listar", jPanel3);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel9.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel9.setLayout(new java.awt.BorderLayout());

        jtbDetallePedido.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jtbDetallePedido);

        jPanel9.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel7.add(jPanel9, java.awt.BorderLayout.CENTER);

        jPanel10.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel10.setPreferredSize(new java.awt.Dimension(719, 135));

        jLabel2.setText("CÃ³digo:");

        jLabel3.setText("Cliente:");

        jLabel4.setText("Producto:");

        jLabel5.setText("Precio:");

        txtStock.setEditable(false);
        txtStock.setFocusable(false);

        cboTipoCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CLIENTE_NATURAL", "CLIENTE_EMPRESA" }));
        cboTipoCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTipoClienteActionPerformed(evt);
            }
        });

        txtCodigo.setEditable(false);
        txtCodigo.setEnabled(false);
        txtCodigo.setFocusable(false);

        jLabel6.setText("Stock:");

        txtPrecio.setEditable(false);
        txtPrecio.setFocusable(false);

        jLabel7.setText("Cantidad:");

        btnAnadir.setText("+");
        btnAnadir.setToolTipText("AÃ±adir Producto al Pedido");
        btnAnadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnadirActionPerformed(evt);
            }
        });

        btnQuitar.setText("-");
        btnQuitar.setToolTipText("Quitar Producto al Pedido");
        btnQuitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addComponent(txtStock, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cboCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cboTipoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cboCliente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAnadir, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnQuitar, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 397, Short.MAX_VALUE))
                            .addComponent(cboProducto, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cboTipoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cboCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAnadir)
                    .addComponent(btnQuitar))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jPanel7.add(jPanel10, java.awt.BorderLayout.PAGE_START);

        jPanel11.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel11.setPreferredSize(new java.awt.Dimension(719, 40));

        txtMontoTotal.setEditable(false);

        jLabel8.setText("Monto Total: S/.");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap(816, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtMontoTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMontoTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addContainerGap())
        );

        jPanel7.add(jPanel11, java.awt.BorderLayout.PAGE_END);

        jPanel4.add(jPanel7, java.awt.BorderLayout.CENTER);

        jPanel8.setPreferredSize(new java.awt.Dimension(776, 40));

        btnAnular.setMnemonic('a');
        btnAnular.setText("Anular");
        btnAnular.setToolTipText("Anular Pedido");
        btnAnular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnularActionPerformed(evt);
            }
        });

        btnGuardar.setMnemonic('g');
        btnGuardar.setText("Guardar");
        btnGuardar.setToolTipText("Guardar Pedido");
        btnGuardar.setMaximumSize(new java.awt.Dimension(76, 23));
        btnGuardar.setMinimumSize(new java.awt.Dimension(76, 23));
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnNuevo.setMnemonic('n');
        btnNuevo.setText("Nuevo");
        btnNuevo.setToolTipText("Nuevo Pedido");
        btnNuevo.setMaximumSize(new java.awt.Dimension(76, 23));
        btnNuevo.setMinimumSize(new java.awt.Dimension(76, 23));
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 783, Short.MAX_VALUE)
                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAnular)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAnular)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel4.add(jPanel8, java.awt.BorderLayout.SOUTH);

        jtbPrincipal.addTab("OperaciÃ³n", jPanel4);

        jPanel2.add(jtbPrincipal, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cboTipoClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTipoClienteActionPerformed
        if (cboTipoCliente.getSelectedIndex() == 0) {
            llenarComboClienteNatural();
        } else {
            llenarComboClienteEmpresa();
        }
    }//GEN-LAST:event_cboTipoClienteActionPerformed

    private void btnAnadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnadirActionPerformed
        try {
            Producto p = (Producto) cboProducto.getSelectedItem();
            if (p == null) {
                enviarMensajeError("Seleccione un producto");
                return;
            }
            double cantidad = Double.parseDouble(txtCantidad.getText().trim());
            double stock = Double.parseDouble(txtStock.getText());
            if (cantidad <= 0 || cantidad > stock) {
                enviarMensajeError("Cantidad invÃ¡lida. Debe estar entre 1 y " + stock + ".");
                txtCantidad.requestFocusInWindow();
                return;
            }
            double precioUnit = Double.parseDouble(txtPrecio.getText());
            for (int i = 0; i < detalleModel.getRowCount(); i++) {
                int idFila = (int) detalleModel.getValueAt(i, 0);
                if (idFila == p.getIdProducto()) {
                    double viejaCant = (double) detalleModel.getValueAt(i, 2);
                    double nuevaCant = viejaCant + cantidad;
                    if (nuevaCant > stock) {
                        enviarMensajeError("No puede exceder el stock disponible (" + stock + ").");
                        return;
                    }
                    detalleModel.setValueAt(nuevaCant, i, 2);
                    detalleModel.setValueAt(nuevaCant * precioUnit, i, 4);
                    return;
                }
            }
            double subtotal = cantidad * precioUnit;
            detalleModel.addRow(new Object[]{
                p.getIdProducto(),
                p.getNombre(),
                cantidad,
                precioUnit,
                subtotal
            });

        } catch (NumberFormatException ex) {
            enviarMensajeError("La cantidad debe ser un nÃºmero entero.");
            txtCantidad.requestFocusInWindow();
        }
    }//GEN-LAST:event_btnAnadirActionPerformed

    private void btnQuitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarActionPerformed
        int row = jtbDetallePedido.getSelectedRow();
        if (row >= 0) {
            int opc = JOptionPane.showConfirmDialog(
                    this,
                    "Â¿Desea eliminar el Producto seleccionado?",
                    "Confirmar eliminaciÃ³n",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE
            );
            if (opc != JOptionPane.YES_OPTION) {
                return;
            }
            detalleModel.removeRow(row);
            actualizarTotal();
        } else {
            JOptionPane.showMessageDialog(
                    this,
                    "Seleccione primero la fila que desea eliminar.",
                    "Sin selecciÃ³n",
                    JOptionPane.WARNING_MESSAGE
            );
        }

    }//GEN-LAST:event_btnQuitarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        try {
            if (jtbDetallePedido.getModel().getRowCount() > 0) {
                Pedido pedido = new Pedido();
                pedido.setCliente((Cliente) cboCliente.getSelectedItem());
                pedido.setFechaPedido(LocalDateTime.now());
                pedido.setMontoTotal(Double.valueOf(this.txtMontoTotal.getText()));
                List<DetallePedido> detalles = new ArrayList<>();
                ProductoService prodService = new ProductoService();
                TableModel m = jtbDetallePedido.getModel();
                for (int i = 0; i < m.getRowCount(); i++) {
                    int idProd = (int) m.getValueAt(i, 0);
                    double cantidad = (double) m.getValueAt(i, 2);
                    double precioUnitario = (double) m.getValueAt(i, 3);
                    double subTotal = (double) m.getValueAt(i, 4);
                    Producto producto = new Producto();
                    producto.setIdProducto(idProd);
                    producto = prodService.buscarProducto(producto);

                    DetallePedido det = new DetallePedido();
                    det.setProducto(producto);
                    det.setPrecioUnitario(precioUnitario);
                    det.setCantidad(cantidad);
                    det.setSubTotal(subTotal);
                    det.setPedido(pedido);
                    detalles.add(det);
                }
                pedido.setDetallePedido(detalles);
                pedidoService.realizarPedido(pedido);
                enviarMensajeExito("Pedido registrado con Ã©xito. ID: " + pedido.getIdPedido());
                this.txtCodigo.setText(String.valueOf(pedido.getIdPedido()));
                this.btnGuardar.setEnabled(false);
            } else {
                enviarMensajeError("Debe de existir por lo menos un producto para pedir.");
            }

        } catch (Exception ex) {
            enviarMensajeError("Error al guardar el pedido: " + ex.getMessage());
            Logger.getLogger(FrmCategoria.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        // TODO add your handling code here:
        limpiar();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnAnularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnularActionPerformed
        // TODO add your handling code here:
        try {
            if (txtCodigo.getText().trim().length() > 0) {
                int opc = JOptionPane.showConfirmDialog(
                        this,
                        "Â¿Desea anular el Pedido seleccionado?",
                        "Confirmar eliminaciÃ³n",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE
                );
                if (opc != JOptionPane.YES_OPTION) {
                    return;
                }

                Pedido pedido = new Pedido();
                pedido.setIdPedido(Integer.valueOf(txtCodigo.getText()));
                pedidoService.anularPedido(pedido);
                enviarMensajeExito("Se anulo el pedido con ID: " + txtCodigo.getText());
                limpiar();
            } else {
                enviarMensajeError("No existe Pedido para anular");
            }
        } catch (Exception ex) {
            Logger.getLogger(FrmCategoria.class.getName()).log(Level.SEVERE, null, ex);
            enviarMensajeError("Error cargando clientes: " + ex.getMessage());
        }

    }//GEN-LAST:event_btnAnularActionPerformed

    private void btnActualizarPedidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarPedidosActionPerformed
        inicializarTablaPedidosConDetalles();
    }//GEN-LAST:event_btnActualizarPedidosActionPerformed

    private void inicializarTablaDetalle() {
        detalleModel = new DefaultTableModel(
                new String[]{"ID", "Nombre", "Cantidad", "Precio Unitario", "Subtotal"},
                0
        ) {
            @Override
            public boolean isCellEditable(int row, int col) {
                return false;
            }

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                if (columnIndex == 2) {
                    return Double.class;       // Cantidad
                }
                if (columnIndex == 3 || columnIndex == 4) {
                    return Double.class; // Precio, Subtotal
                }
                return super.getColumnClass(columnIndex);
            }
        };
        jtbDetallePedido.setModel(detalleModel);
        TableColumnModel cm = jtbDetallePedido.getColumnModel();
        cm.getColumn(0).setMinWidth(50);
        cm.getColumn(0).setMaxWidth(50);
        cm.getColumn(0).setPreferredWidth(50);
        int[] fixedCols = {2, 3, 4};
        for (int col : fixedCols) {
            cm.getColumn(col).setMinWidth(100);
            cm.getColumn(col).setMaxWidth(100);
            cm.getColumn(col).setPreferredWidth(100);
        }
        jtbDetallePedido.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        jtbDetallePedido.getTableHeader().setReorderingAllowed(false);
        detalleModel.addTableModelListener(e -> actualizarTotal());

    }

    private void llenarComboClienteNatural() {
        try {
            List<ClienteNatural> lista = clienteNaturalService.listarClienteNaturales();
            cboCliente.removeAllItems();
            for (ClienteNatural cn : lista) {
                cboCliente.addItem(cn);
            }
            cboCliente.setRenderer(new DefaultListCellRenderer() {
                @Override
                public Component getListCellRendererComponent(
                        JList<?> list, Object value, int index,
                        boolean isSelected, boolean cellHasFocus) {
                    super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                    if (value instanceof ClienteNatural c) {
                        setText(c.getApellido() + " " + c.getNombre() + " (DNI: " + c.getDNI() + ")");
                    }
                    return this;
                }
            });
            cboCliente.setSelectedIndex(0);
        } catch (Exception ex) {
            Logger.getLogger(FrmCategoria.class.getName()).log(Level.SEVERE, null, ex);
            enviarMensajeError("Error cargando clientes: " + ex.getMessage());
        }
    }

    private void llenarComboClienteEmpresa() {
        try {
            List<ClienteEmpresa> lista = clienteEmpresaService.listarClienteEmpresas();
            cboCliente.removeAllItems();
            for (ClienteEmpresa ce : lista) {
                cboCliente.addItem(ce);
            }
            cboCliente.setRenderer(new DefaultListCellRenderer() {
                @Override
                public Component getListCellRendererComponent(
                        JList<?> list, Object value, int index,
                        boolean isSelected, boolean cellHasFocus) {
                    super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                    if (value instanceof ClienteEmpresa c) {
                        setText(c.getRazonSocial().toUpperCase() + " (RUC: " + c.getRuc() + ")");
                    }
                    return this;
                }
            });
            cboCliente.setSelectedIndex(0);
        } catch (Exception ex) {
            Logger.getLogger(FrmCategoria.class.getName()).log(Level.SEVERE, null, ex);
            enviarMensajeError("Error cargando clientes empresa: " + ex.getMessage());
        }
    }

    private void llenarComboCategoria() {
        try {
            CategoriaService service = new CategoriaService();
            List<Categoria> lista = service.listarCategorias();
            cboCategoria.removeAllItems();
            for (Categoria cat : lista) {
                cboCategoria.addItem(cat);
            }
            cboCategoria.setRenderer(new DefaultListCellRenderer() {
                @Override
                public Component getListCellRendererComponent(
                        JList<?> list, Object value, int index,
                        boolean isSelected, boolean cellHasFocus) {
                    super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                    if (value instanceof Categoria categoria) {
                        setText(categoria.getNombre());
                    }
                    return this;
                }
            });
            cboCategoria.addActionListener(evt -> {
                Categoria sel = (Categoria) cboCategoria.getSelectedItem();
                if (sel != null) {
                    llenarComboProductoPorCategoria(sel);
                }
            });
            cboCategoria.setSelectedIndex(0);
        } catch (Exception ex) {
            Logger.getLogger(FrmCategoria.class.getName()).log(Level.SEVERE, null, ex);
            enviarMensajeError("Error cargando categorias: " + ex.getMessage());
        }
    }

    private void llenarComboProductoPorCategoria(Categoria categoria) {
        try {
            List<Producto> productos = productoService.filtrarProductosPorCategoria(categoria.getIdCategoria());
            cboProducto.removeAllItems();
            for (Producto p : productos) {
                cboProducto.addItem(p);
            }
            cboProducto.setRenderer(new DefaultListCellRenderer() {
                @Override
                public Component getListCellRendererComponent(JList<?> list,
                        Object value,
                        int index,
                        boolean isSelected,
                        boolean cellHasFocus) {
                    super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                    if (value instanceof Producto producto) {
                        setText(producto.getNombre());
                    }
                    return this;
                }
            });
            cboProducto.addActionListener(evt -> {
                Producto seleccionado = (Producto) cboProducto.getSelectedItem();
                if (seleccionado != null) {
                    txtStock.setText((String.valueOf(seleccionado.getStock())));
                    txtPrecio.setText(String.valueOf((seleccionado.getPrecio())));
                }
            });
            cboProducto.setSelectedIndex(0);
        } catch (Exception ex) {
            Logger.getLogger(FrmCategoria.class.getName()).log(Level.SEVERE, null, ex);
            enviarMensajeError("Error al cargar productos: " + ex.getMessage());
        }
    }

    private void actualizarTotal() {
        double total = 0;
        for (int i = 0; i < detalleModel.getRowCount(); i++) {
            total += ((Number) detalleModel.getValueAt(i, 4)).doubleValue();
        }
        txtMontoTotal.setText(String.format("%.2f", total));
    }

    /**
     * Inicializa la tabla de pedidos con todos sus detalles. Cada fila
     * corresponde a un detalle de pedido, y las tres primeras columnas guardan
     * los objetos Pedido, Cliente y Producto (ocultas), seguidas de columnas
     * con datos visibles.
     */
    private void inicializarTablaPedidosConDetalles() {
        try {
            // 1) Recuperar todos los pedidos con sus detalles
            List<Pedido> pedidos = pedidoService.listarPedidosConDetalles();

            // 2) Crear modelo
            DefaultTableModel model = new DefaultTableModel(
                    new String[]{
                        "OBJ_PEDIDO", // oculta
                        "OBJ_CLIENTE", // oculta
                        "OBJ_PRODUCTO", // oculta
                        "CÃ³digo",
                        "Cliente",
                        "Producto",
                        "Cantidad",
                        "Precio Unitario",
                        "Subtotal",
                        "Fecha Pedido",
                        "Total"
                    }, 0
            ) {
                @Override
                public boolean isCellEditable(int r, int c) {
                    return false;
                }

                @Override
                public Class<?> getColumnClass(int i) {
                    return switch (i) {
                        case 6 ->
                            Integer.class;       // Cantidad
                        case 7, 8, 10 ->
                            Double.class;     // Precio, Subtotal, Total
                        case 9 ->
                            LocalDateTime.class; // Fecha
                        default ->
                            Object.class;
                    };
                }
            };

            // 3) Rellenar filas
            for (Pedido ped : pedidos) {
                Cliente cli = ped.getCliente();
                for (DetallePedido det : ped.getDetallePedido()) {
                    Producto prod = det.getProducto();
                    model.addRow(new Object[]{
                        ped,
                        cli,
                        prod,
                        ped.getIdPedido(),
                        cli.toString(),
                        prod.getNombre(),
                        det.getCantidad(),
                        det.getPrecioUnitario(),
                        det.getSubTotal(),
                        ped.getFechaPedido(),
                        ped.getMontoTotal()
                    });
                }
            }

            // 4) Asignar modelo
            jtFiltro.setModel(model);

            // 5) Ajustar columnas
            TableColumnModel cm = jtFiltro.getColumnModel();
            // ocultar OBJ_PEDIDO, OBJ_CLIENTE, OBJ_PRODUCTO
            for (int col = 0; col <= 2; col++) {
                cm.getColumn(col).setMinWidth(0);
                cm.getColumn(col).setMaxWidth(0);
                cm.getColumn(col).setWidth(0);
            }
            // Anchos fijos
            cm.getColumn(3).setMinWidth(50);
            cm.getColumn(3).setMaxWidth(50);  // CÃ³digo
            int[] cols100 = {6, 7, 8, 9, 10}; // Precio, Subtotal, Total
            for (int col : cols100) {
                cm.getColumn(col).setMinWidth(100);
                cm.getColumn(col).setMaxWidth(100);
                cm.getColumn(col).setPreferredWidth(100);
            }
            jtFiltro.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);

            // 6) Renderer para dos decimales en las columnas numÃ©ricas
            DefaultTableCellRenderer decimalRenderer = new DefaultTableCellRenderer() {
                private final DecimalFormat fmt = new DecimalFormat("0.00");

                @Override
                protected void setValue(Object value) {
                    if (value instanceof Number number) {
                        setText(fmt.format(number.doubleValue()));
                    } else {
                        super.setValue(value);
                    }
                }
            };
            decimalRenderer.setHorizontalAlignment(SwingConstants.RIGHT);
            for (int c : new int[]{6, 7, 8, 10}) {
                cm.getColumn(c).setCellRenderer(decimalRenderer);
            }

            DefaultTableCellRenderer dateRenderer = new DefaultTableCellRenderer() {
                private final DateTimeFormatter df = DateTimeFormatter.ofPattern("dd/MM/yyyy");

                @Override
                protected void setValue(Object value) {
                    if (value instanceof LocalDateTime) {
                        setText(((LocalDateTime) value).format(df));
                    } else {
                        super.setValue(value);
                    }
                }
            };
            dateRenderer.setHorizontalAlignment(SwingConstants.CENTER);
            cm.getColumn(9).setCellRenderer(dateRenderer);

            // 7) Dobleâclic para cargar en el formulario
            jtFiltro.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    if (e.getClickCount() == 2) {
                        int row = jtFiltro.getSelectedRow();
                        if (row < 0) {
                            return;
                        }
                        // Recupera el modelo actual del JTable
                        DefaultTableModel modeloActual = (DefaultTableModel) jtFiltro.getModel();
                        // AsegÃºrate de usar el Ã­ndice de la columna donde guardas el objeto Pedido
                        Pedido sel = (Pedido) modeloActual.getValueAt(row, 0);
                        cargarPedidoEnFormulario(sel);
                    }
                }
            });

            jtFiltro.getTableHeader().setReorderingAllowed(false);

        } catch (Exception ex) {
            Logger.getLogger(FrmPedido.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Carga todos los datos de un Pedido en FrmPedido: - Cabecera: cÃ³digo,
     * tipo/cliente - Detalle: vacÃ­a y vuelve a rellenar jtbDetallePedido -
     * Monto total
     */
    private void cargarPedidoEnFormulario(Pedido pedido) {
        // 1) Cabecera
        txtCodigo.setText(String.valueOf(pedido.getIdPedido()));
        // elegir tipo de cliente
        if (pedido.getCliente() instanceof ClienteNatural) {
            cboTipoCliente.setSelectedIndex(0);
            llenarComboClienteNatural();
        } else {
            cboTipoCliente.setSelectedIndex(1);
            llenarComboClienteEmpresa();
        }
        cboCliente.setSelectedItem(pedido.getCliente());

        // 2) Detalle: limpiar y volver a insertar
        detalleModel.setRowCount(0);
        for (DetallePedido det : pedido.getDetallePedido()) {
            Producto prod = det.getProducto();
            detalleModel.addRow(new Object[]{
                prod.getIdProducto(),
                prod.getNombre(),
                det.getCantidad(),
                det.getPrecioUnitario(),
                det.getSubTotal()
            });
        }

        // 3) Monto total
        txtMontoTotal.setText(String.format("%.2f", pedido.getMontoTotal()));

        // 4) Cambiar a pestaÃ±a OperaciÃ³n
        jtbPrincipal.setSelectedIndex(1);
    }

    public void enviarMensajeExito(String mensaje) {
        JOptionPane.showMessageDialog(
                this,
                mensaje,
                "OperaciÃ³n exitosa",
                JOptionPane.INFORMATION_MESSAGE
        );
    }

    public void enviarMensajeError(String mensaje) {
        JOptionPane.showMessageDialog(
                this,
                mensaje,
                "Error",
                JOptionPane.ERROR_MESSAGE
        );
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizarPedidos;
    private javax.swing.JButton btnAnadir;
    private javax.swing.JButton btnAnular;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnQuitar;
    private javax.swing.JComboBox<Categoria> cboCategoria;
    private javax.swing.JComboBox<Cliente> cboCliente;
    private javax.swing.JComboBox<Producto> cboProducto;
    private javax.swing.JComboBox<String> cboTipoCliente;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jtFiltro;
    private javax.swing.JTable jtbDetallePedido;
    private javax.swing.JTabbedPane jtbPrincipal;
    private javax.swing.JLabel lblTituloFormulario;
    private javax.swing.JFormattedTextField txtCantidad;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtMontoTotal;
    private javax.swing.JTextField txtPrecio;
    private javax.swing.JTextField txtStock;
    // End of variables declaration//GEN-END:variables
}
